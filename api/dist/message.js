"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendParcelNotificationMessage = exports.sendGreetingMessage = exports.sendRegistrationConfirmMessage = void 0;
const axios_1 = __importDefault(require("axios"));
const baseUrl = 'https://parcetrace.vercel.app/';
function sendMessage(message, channelAccessToken, userId) {
    return __awaiter(this, void 0, void 0, function* () {
        const headers = { 'Authorization': `Bearer ${channelAccessToken}`, 'Content-Type': 'application/json' };
        const body = {
            to: userId,
            messages: [message],
        };
        return axios_1.default.post('https://api.line.me/v2/bot/message/push', body, { headers: headers });
    });
}
function sendRegistrationConfirmMessage(userId, channelAccessToken, userData) {
    return __awaiter(this, void 0, void 0, function* () {
        const message = { type: 'text', text: `‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ßüóÉÔ∏è\n\n‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏´‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö\n\n‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á: ${userData.name}\n‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•: ${userData.surname}\n‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå: ${userData.phoneNumber}\n‡πÄ‡∏•‡∏Ç‡∏´‡πâ‡∏≠‡∏á: ${userData.room}` };
        return sendMessage(message, channelAccessToken, userId);
    });
}
exports.sendRegistrationConfirmMessage = sendRegistrationConfirmMessage;
function sendGreetingMessage(userId, channelAccessToken, displayName) {
    return __awaiter(this, void 0, void 0, function* () {
        const greetingMessage = { type: 'text', text: `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∏‡∏ì ${displayName}!\n‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏£‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‚ò∫Ô∏èüéâ\n\n ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏•‡∏¥‡∏á‡∏Ñ‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á üëá\n ${baseUrl}regis?userId=${userId}` };
        return sendMessage(greetingMessage, channelAccessToken, userId);
    });
}
exports.sendGreetingMessage = sendGreetingMessage;
function sendParcelNotificationMessage(userId, channelAccessToken, parcelData) {
    return __awaiter(this, void 0, void 0, function* () {
        const message = { type: 'text', text: `üîî ‡∏Å‡∏¥‡πä‡∏á‡∏Å‡πà‡∏≠‡∏á ‡∏°‡∏µ‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏°‡∏≤‡∏™‡πà‡∏á‡∏Ñ‡πâ‡∏≤‡∏ö\n\n‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á: ${parcelData.sender}\n‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö‡∏û‡∏±‡∏™‡∏î‡∏∏: ${parcelData.location}\n\n‡∏Å‡∏î‡∏ó‡∏µ‡πà‡∏•‡∏¥‡πâ‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏•‡∏á‡πÑ‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÅ‡∏•‡πâ‡∏ß\n${baseUrl}confirmation?parcelId=${parcelData.parcelId}` };
        return sendMessage(message, channelAccessToken, userId);
    });
}
exports.sendParcelNotificationMessage = sendParcelNotificationMessage;
exports.default = { sendRegistrationConfirmMessage, sendGreetingMessage, sendParcelNotificationMessage };
